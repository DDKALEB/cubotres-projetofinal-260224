# -*- coding: utf-8 -*-
"""cuboTres-projetofinal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10npJ681_bkkOKLgdHMxlIDYoGFT8fj0X
"""



"""# Análise Exploratória

Para iniciar esta análise exploratória, primeiro importe bibliotecas e defina funções para plotar os dados usando matplotlib.

"""

from mpl_toolkits.mplot3d import Axes3D
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt # plotting
import numpy as np # linear algebra
import os # accessing directory structure
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

"""## Existem 4 arquivos csv na versão atual do conjunto de dados:"""

import os

# Substitua '/caminho/do/seu/diretorio' pelo caminho correto
for dirname, _, filenames in os.walk('/content/'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

"""# As próximas células de código ocultas definem funções para plotar dados. Clique no botão “Código” no kernel publicado para revelar o código oculto."""

import matplotlib.pyplot as plt
import numpy as np

# Função para criar gráficos de distribuição das colunas do DataFrame
def plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):
    nunique = df.nunique()
    df = df[[col for col in df if 1 < nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values
    nRow, nCol = df.shape
    columnNames = list(df)
    nGraphRow = (nCol + nGraphPerRow - 1) // nGraphPerRow  # Use // para divisão inteira
    plt.figure(num=None, figsize=(6 * nGraphPerRow, 8 * nGraphRow), dpi=80, facecolor='w', edgecolor='k')
    for i in range(min(nCol, nGraphShown)):
        plt.subplot(nGraphRow, nGraphPerRow, i + 1)
        columnDf = df.iloc[:, i]
        if not np.issubdtype(type(columnDf.iloc[0]), np.number):
            # Se os dados não forem numéricos, plota um gráfico de barras
            valueCounts = columnDf.value_counts()
            valueCounts.plot.bar()
        else:
            # Se os dados forem numéricos, plota um histograma
            columnDf.hist()
        plt.ylabel('counts')
        plt.xticks(rotation=90)
        plt.title(f'{columnNames[i]} (column {i})')
    plt.tight_layout(pad=1.0, w_pad=1.0, h_pad=1.0)
    plt.show()

import pandas as pd
import io

# Leia o arquivo CSV para identificar as linhas problemáticas
with open('/content/venda_passagem_01_2020.csv', 'r', encoding='latin-1') as file:
    try:
        # Itere pelas linhas do arquivo
        for i, line in enumerate(file):
            # Tente ler a linha como um DataFrame do pandas
            pd.read_csv(io.StringIO(line))
    except pd.errors.ParserError:
        print(f"A linha {i+1} está causando problemas.")

import pandas as pd

# Leia os dados do CSV para um DataFrame, ignorando linhas com erros
df = pd.read_csv('/content/venda_passagem_01_2020.csv', encoding='latin-1', error_bad_lines=False)

# Chame a função para plotar a distribuição das colunas
plotPerColumnDistribution(df, 10, 3)

# Distribution graphs (histogram/bar graph) of column data
def plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):
    nunique = df.nunique()
    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values
    nRow, nCol = df.shape
    columnNames = list(df)
    nGraphRow = (nCol + nGraphPerRow - 1) / nGraphPerRow
    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')
    for i in range(min(nCol, nGraphShown)):
        plt.subplot(nGraphRow, nGraphPerRow, i + 1)
        columnDf = df.iloc[:, i]
        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):
            valueCounts = columnDf.value_counts()
            valueCounts.plot.bar()
        else:
            columnDf.hist()
        plt.ylabel('counts')
        plt.xticks(rotation = 90)
        plt.title(f'{columnNames[i]} (column {i})')
    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)
    plt.show()

# Correlation matrix
def plotCorrelationMatrix(df, graphWidth):
    filename = df.dataframeName
    df = df.dropna('columns') # drop columns with NaN
    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values
    if df.shape[1] < 2:
        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')
        return
    corr = df.corr()
    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')
    corrMat = plt.matshow(corr, fignum = 1)
    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)
    plt.yticks(range(len(corr.columns)), corr.columns)
    plt.gca().xaxis.tick_bottom()
    plt.colorbar(corrMat)
    plt.title(f'Correlation Matrix for {filename}', fontsize=15)
    plt.show()

"""# Agora você está pronto para ler os dados e usar as funções de plotagem para visualizá-los.

# Vamos verificar o primeiro arquivo:
/kaggle/input/venda_passagem_01_2020/venda_passagem_01_2020.csv
"""

import pandas as pd

nRowsRead = 1000 # Especifique 'None' se quiser ler o arquivo inteiro
# venda_passagem_01_2020.csv pode ter mais linhas na realidade, mas estamos apenas carregando/visualizando as primeiras 1000 linhas
try:
    df1 = pd.read_csv('venda_passagem_01_2020.csv', delimiter=',', nrows=nRowsRead, encoding='latin-1')
except pd.errors.ParserError:
    # Se houver um erro de análise, tente ler com tratamento de erros
    df1 = pd.read_csv('venda_passagem_01_2020.csv', delimiter=',', nrows=nRowsRead, on_bad_lines='skip', encoding='latin-1')

df1.dataframeName = 'venda_passagem_01_2020.csv'
nRow, nCol = df1.shape

df1.shape

df1.head(5)





